// ==UserScript==
// @name         YouTube Auto Unsubscribe (In-Page Notifications)
// @namespace    https://youtube.com/
// @version      3.1
// @description  Unsubscribes from all channels on YouTube /feed/channels with visible on-page notifications instead of browser popups (2025 FIXED version). ‚ö†Ô∏è Use carefully! ‚ö†Ô∏è
// @author       Jhon DRHEY
// @match        https://www.youtube.com/feed/channels
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function () {
    'use strict';

    let unsubscribed = 0;
    let total = 0;
    let index = 0;
    let buttons = [];

    // Injects a floating notification box
    function createNotificationContainer() {
        const container = document.createElement('div');
        container.id = 'yt-auto-unsub-notifier';
        container.style.position = 'fixed';
        container.style.top = '10px';
        container.style.right = '10px';
        container.style.width = '300px';
        container.style.maxHeight = '80vh';
        container.style.overflowY = 'auto';
        container.style.zIndex = '99999';
        container.style.fontFamily = 'Arial, sans-serif';
        container.style.fontSize = '14px';
        container.style.backgroundColor = '#fff';
        container.style.border = '1px solid #ccc';
        container.style.borderRadius = '8px';
        container.style.boxShadow = '0 0 10px rgba(0,0,0,0.3)';
        container.style.padding = '10px';
        container.innerHTML = `<strong style="display:block; margin-bottom:5px;">üì£ YouTube Auto Unsubscribe</strong>`;
        document.body.appendChild(container);
    }

    function addNotification(text) {
        const container = document.getElementById('yt-auto-unsub-notifier');
        if (!container) return;
        const note = document.createElement('div');
        note.textContent = text;
        note.style.marginBottom = '4px';
        note.style.padding = '4px 6px';
        note.style.backgroundColor = '#f1f1f1';
        note.style.borderRadius = '4px';
        container.appendChild(note);
        container.scrollTop = container.scrollHeight;
    }

    function autoScrollToLoadAll(callback) {
        let lastHeight = 0;
        let retries = 0;
        const maxRetries = 20;

        const interval = setInterval(() => {
            window.scrollTo(0, document.body.scrollHeight);
            const newHeight = document.body.scrollHeight;

            if (newHeight === lastHeight) {
                retries++;
            } else {
                retries = 0;
                lastHeight = newHeight;
            }

            if (retries >= 5) {
                clearInterval(interval);
                addNotification('‚úÖ Finished loading all channels.');
                callback();
            }
        }, 1000);
    }

    function collectButtons() {
        const btns = Array.from(document.querySelectorAll('ytd-channel-renderer tp-yt-paper-button[aria-label*="Subscribed"]'));
        return btns.filter(btn => btn.innerText.trim().toLowerCase() === 'subscribed');
    }

    function clickConfirmDialog() {
        const confirmBtn = document.querySelector('yt-confirm-dialog-renderer tp-yt-paper-button#confirm-button');
        if (confirmBtn) {
            confirmBtn.click();
        }
    }

    function unsubscribeNext() {
        if (index >= buttons.length) {
            addNotification(`üéâ Done! Unsubscribed from ${unsubscribed} out of ${total} channels.`);
            return;
        }

        const button = buttons[index];
        if (!button || button.disabled) {
            index++;
            unsubscribeNext();
            return;
        }

        button.click(); // Open confirm popup

        setTimeout(() => {
            clickConfirmDialog(); // Click confirm
            unsubscribed++;
            addNotification(`üö´ Unsubscribed (${unsubscribed}/${total}) - Channel #${index + 1}`);
            index++;
            setTimeout(unsubscribeNext, 2000); // Delay for safety
        }, 700);
    }

    function startUnsubscribing() {
        buttons = collectButtons();
        total = buttons.length;

        if (total === 0) {
            addNotification('üì≠ No subscriptions found to unsubscribe.');
            return;
        }

        addNotification(`Found ${total} subscriptions. Starting to unsubscribe...`);
        unsubscribeNext();
    }

    // Start script
    window.addEventListener('load', () => {
        setTimeout(() => {
            createNotificationContainer();
            addNotification('üîÅ Scrolling to load all channels...');
            autoScrollToLoadAll(startUnsubscribing);
        }, 2000);
    });
})();

// ==UserScript==
// @name         YouTube Auto Unsubscribe (Working August 2025)
// @namespace    https://youtube.com/
// @version      3.2
// @description  Automatically unsubscribes from all channels on /feed/channels with fixed detection + on-page notifications (updated layout support). Use with care! ‚ö†Ô∏èüî•‚úÖ
// @author       Jhon DRHEY
// @match        https://www.youtube.com/feed/channels
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function () {
    'use strict';

    let unsubscribed = 0;
    let total = 0;
    let index = 0;
    let subscribeButtons = [];

    function createNotifier() {
        const div = document.createElement('div');
        div.id = 'yt-unsub-notify';
        div.style.position = 'fixed';
        div.style.top = '10px';
        div.style.right = '10px';
        div.style.background = '#fff';
        div.style.color = '#000';
        div.style.padding = '10px';
        div.style.border = '1px solid #ccc';
        div.style.borderRadius = '8px';
        div.style.boxShadow = '0 2px 12px rgba(0,0,0,0.2)';
        div.style.zIndex = 9999;
        div.style.maxWidth = '300px';
        div.style.fontFamily = 'Arial, sans-serif';
        div.style.fontSize = '14px';
        div.innerHTML = '<strong>üì£ YouTube Auto Unsub</strong><div id="yt-unsub-log"></div>';
        document.body.appendChild(div);
    }

    function log(msg) {
        const box = document.getElementById('yt-unsub-log');
        if (box) {
            const entry = document.createElement('div');
            entry.textContent = msg;
            box.appendChild(entry);
            box.scrollTop = box.scrollHeight;
        }
    }

    function scrollToLoadAll(callback) {
        let lastHeight = 0;
        let tries = 0;
        const maxTries = 15;

        const scrollInterval = setInterval(() => {
            window.scrollTo(0, document.body.scrollHeight);
            const newHeight = document.body.scrollHeight;

            if (newHeight === lastHeight) {
                tries++;
            } else {
                tries = 0;
                lastHeight = newHeight;
            }

            if (tries >= 5) {
                clearInterval(scrollInterval);
                log('‚úÖ Finished loading all channels.');
                callback();
            }
        }, 1000);
    }

    function findSubscribeButtons() {
        return Array.from(document.querySelectorAll('ytd-channel-renderer ytd-subscribe-button-renderer tp-yt-paper-button'))
            .filter(btn => {
                const label = btn.getAttribute('aria-label') || '';
                return /subscribed/i.test(label); // Matches 'Subscribed' in any case
            });
    }

    function confirmUnsubscribe() {
        const confirmBtn = document.querySelector('yt-confirm-dialog-renderer tp-yt-paper-button#confirm-button');
        if (confirmBtn) {
            confirmBtn.click();
        }
    }

    function unsubscribeLoop() {
        if (index >= subscribeButtons.length) {
            log(`üéâ Finished. Unsubscribed from ${unsubscribed} channels.`);
            return;
        }

        const btn = subscribeButtons[index];
        if (!btn || btn.disabled) {
            index++;
            unsubscribeLoop();
            return;
        }

        btn.click(); // Open confirm dialog

        setTimeout(() => {
            confirmUnsubscribe();
            unsubscribed++;
            log(`üö´ Unsubscribed (${unsubscribed}/${total})`);
            index++;
            setTimeout(unsubscribeLoop, 2000); // delay to avoid rate limits
        }, 600);
    }

    function start() {
        subscribeButtons = findSubscribeButtons();
        total = subscribeButtons.length;

        if (total === 0) {
            log('‚ö†Ô∏è No "Subscribed" buttons found. Try reloading or checking layout.');
            return;
        }

        log(`üîç Found ${total} subscriptions.`);
        unsubscribeLoop();
    }

    // Start process
    window.addEventListener('load', () => {
        setTimeout(() => {
            createNotifier();
            log('üîÅ Scrolling to load all channels...');
            scrollToLoadAll(start);
        }, 2000);
    });
})();
